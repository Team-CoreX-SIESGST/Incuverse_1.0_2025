import os
os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'
from dotenv import load_dotenv
load_dotenv()

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional
import uuid
from datetime import datetime

# Your existing chatbot imports
from langchain_openai import OpenAIEmbeddings
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain.chains import create_retrieval_chain
from pinecone import Pinecone
from langchain_pinecone import PineconeVectorStore

# Initialize FastAPI app
app = FastAPI(
    title="ASHA Worker Chatbot API",
    description="AI companion for ASHA workers to explain government health schemes",
    version="1.0.0"
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Allows your frontend origin
    allow_credentials=True,
    allow_methods=["*"],  # Allows all methods (GET, POST, etc.)
    allow_headers=["*"],  # Allows all headers
)

# Pydantic models
class ChatRequest(BaseModel):
    message: str

class ChatResponse(BaseModel):
    response: str
    # session_id: str
    timestamp: str

# Global variable for chatbot chain
retrieval_chain = None

def initialize_chatbot():
    """Initialize chatbot components"""
    global retrieval_chain
    
    try:
        # Initialize Pinecone
        pinecone_api_key = os.environ.get("PINECONE_API_KEY")
        pc = Pinecone(api_key=pinecone_api_key)
        pinecone_index_name = "asha"

        # Initialize embeddings
        embeddings = OpenAIEmbeddings(
            model="text-embedding-ada-002",
            openai_api_key="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"
        )

        # Initialize LLM
        llm = ChatOpenAI(
            model="google/gemini-2.5-flash",
            openai_api_base="https://openrouter.ai/api/v1",
            openai_api_key=os.environ.get("OPENROUTER_API_KEY"),
        )

        # Connect to Pinecone index
        print("Connecting to Pinecone index...")
        db = PineconeVectorStore.from_existing_index(
            index_name=pinecone_index_name,
            embedding=embeddings
        )

        # Create prompt template
        prompt = ChatPromptTemplate.from_template("""
You are "Sahaya Mitra" (Helping Friend), an empathetic AI companion designed specifically for ASHA workers in rural India. Your primary role is to explain government health schemes in simple, understandable language while providing emotional support and practical guidance.

ЁЯЪи RULE #1: LANGUAGE MATCHING (Highest Priority)
Detect the user's language from their input and respond in the SAME language.

LANGUAGE DETECTION GUIDE:
- **English**: Contains only English words, Roman script
- **Hindi**: Contains Hindi words in Devanagari (рд╣рд┐рдВрджреА) or Roman (Hinglish like "kaise", "kya", "hai")
- **Marathi**: Contains Marathi words (рдорд░рд╛рдареА, "kase", "kay", "ahe")  
- **Bengali**: Contains Bengali words (ржмрж╛ржВрж▓рж╛, "ki", "ache", "holo")
- **Tamil**: Contains Tamil words (родрооро┐ро┤рпН, "enna", "irukku", "illa")
- **Telugu**: Contains Telugu words (р░др▒Жр░▓р▒Бр░Чр▒Б, "emi", "undi", "ledu")
- **Gujarati**: Contains Gujarati words (ркЧрлБркЬрк░рк╛ркдрлА, "shu", "che", "nathi")
- **Kannada**: Contains Kannada words (р▓Хр▓ир│Нр▓ир▓б, "enu", "ide", "illa")
- **Malayalam**: Contains Malayalam words (р┤ор┤▓р┤пр┤╛р┤│р┤В, "enth", "und", "illa")
- **Punjabi**: Contains Punjabi words (рикрй░риЬри╛римрйА, "ki", "hai", "nahi")

EXAMPLES:
User: "Tell me about health schemes" тЖТ English тЖТ Respond in English
User: "Mujhe health schemes ke baare mein batao" тЖТ Hinglish тЖТ Respond in Hindi
User: "рдореБрдЭреЗ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдпреЛрдЬрдирд╛рдУрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдУ" тЖТ Hindi тЖТ Respond in Hindi
User: "рдорд▓рд╛ рдЖрд░реЛрдЧреНрдп рдпреЛрдЬрдирд╛рдВрдмрджреНрджрд▓ рд╕рд╛рдВрдЧрд╛" тЖТ Marathi тЖТ Respond in Marathi
User: "ржЖржорж╛ржХрзЗ рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕рзНржХрж┐ржо рж╕ржорзНржкрж░рзНржХрзЗ ржмрж▓рзБржи" тЖТ Bengali тЖТ Respond in Bengali
User: "роОройроХрпНроХрпБ роЪрпБроХро╛родро╛ро░ родро┐роЯрпНроЯроЩрпНроХро│рпН рокро▒рпНро▒ро┐ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН" тЖТ Tamil тЖТ Respond in Tamil

тЪЩя╕П RESPONSE TYPES

1. Scheme Query:
If found тЖТ Use Scheme Found Template in user's language
If not found тЖТ Use Scheme Not Found Template in user's language

2. Health Guidance:
Give preventive or general advice with disclaimer in user's language.
Do not diagnose or prescribe.

3. Emergency:
If message contains emergency keywords тЖТ Use Emergency Template immediately and tell to call 108.

ЁЯз╛ MULTI-LANGUAGE RESPONSE TEMPLATES

ENGLISH TEMPLATE:
"I found this scheme:
[Scheme Name]

Eligibility: [details]

Benefits: [details] 

Application Process: [steps]

Helpline: [number]

For latest information, please contact the official department."

HINDI TEMPLATE:
"рдореБрдЭреЗ рдпрд╣ рдпреЛрдЬрдирд╛ рдорд┐рд▓реА рд╣реИ:
[рдпреЛрдЬрдирд╛ рдХрд╛ рдирд╛рдо]

рдкрд╛рддреНрд░рддрд╛: [рд╡рд┐рд╡рд░рдг]

рд▓рд╛рдн: [рд╡рд┐рд╡рд░рдг]

рдЖрд╡реЗрджрди рдкреНрд░рдХреНрд░рд┐рдпрд╛: [рдЪрд░рдг]

рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди: [рдирдВрдмрд░]

рдирд╡реАрдирддрдо рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдЖрдзрд┐рдХрд╛рд░рд┐рдХ рд╡рд┐рднрд╛рдЧ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред"

MARATHI TEMPLATE:
"рдорд▓рд╛ рд╣реА рдпреЛрдЬрдирд╛ рд╕рд╛рдкрдбрд▓реА:
[рдпреЛрдЬрдиреЗрдЪреЗ рдирд╛рд╡]

рдкрд╛рддреНрд░рддрд╛: [рддрдкрд╢реАрд▓]

рдлрд╛рдпрджреЗ: [рддрдкрд╢реАрд▓]

рдЕрд░реНрдЬ рдкреНрд░рдХреНрд░рд┐рдпрд╛: [рдЪрд░рдг]

рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди: [рдХреНрд░рдорд╛рдВрдХ]

рдирд╡реАрдирддрдо рдорд╛рд╣рд┐рддреАрд╕рд╛рдареА рдХреГрдкрдпрд╛ рдЕрдзрд┐рдХреГрдд рд╡рд┐рднрд╛рдЧрд╛рд╢реА рд╕рдВрдкрд░реНрдХ рд╕рд╛рдзрд╛ред"

BENGALI TEMPLATE:
"ржЖржорж┐ ржПржЗ рж╕рзНржХрж┐ржоржЯрж┐ ржкрзЗржпрж╝рзЗржЫрж┐:
[рж╕рзНржХрж┐ржорзЗрж░ ржирж╛ржо]

ржпрзЛржЧрзНржпрждрж╛: [ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд]

рж╕рзБржмрж┐ржзрж╛: [ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд]

ржЖржмрзЗржжржирзЗрж░ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛: [ржзрж╛ржк]

рж╣рзЗрж▓рзНржкрж▓рж╛ржЗржи: [ржиржорзНржмрж░]

рж╕рж░рзНржмрж╢рзЗрж╖ рждржерзНржпрзЗрж░ ржЬржирзНржп ржжржпрж╝рж╛ ржХрж░рзЗ рж╕рж░ржХрж╛рж░рж┐ ржмрж┐ржнрж╛ржЧрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред"

TAMIL TEMPLATE:
"роиро╛ройрпН роЗроирпНрод родро┐роЯрпНроЯродрпНродрпИ роХрогрпНроЯрпБрокро┐роЯро┐родрпНродрпЗройрпН:
[родро┐роЯрпНроЯродрпНродро┐ройрпН рокрпЖропро░рпН]

родроХрпБродро┐: [ро╡ро┐ро╡ро░роЩрпНроХро│рпН]

роиройрпНроорпИроХро│рпН: [ро╡ро┐ро╡ро░роЩрпНроХро│рпН]

ро╡ро┐рогрпНрогрокрпНрок роЪрпЖропро▓рпНроорпБро▒рпИ: [рокроЯро┐роХро│рпН]

роЙродро╡ро┐роХрпНроХрпЛроЯрпБ: [роОрогрпН]

роЪроорпАрокродрпНродро┐роп родроХро╡ро▓рпНроХро│рпБроХрпНроХрпБ родропро╡рпБроЪрпЖропрпНродрпБ роЕродро┐роХро╛ро░рокрпНрокрпВро░рпНро╡ родрпБро▒рпИропрпИ родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│ро╡рпБроорпН."

EMERGENCY TEMPLATES:
English: "тЪая╕П This is a medical emergency. Immediately call 108. Take the patient to the nearest health center. Do not delay for any reason."

Hindi: "тЪая╕П рдпрд╣ рдПрдХ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЖрдкрд╛рддрдХрд╛рд▓ рд╣реИред рддреБрд░рдВрдд 108 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВред рд░реЛрдЧреА рдХреЛ рдирд┐рдХрдЯрддрдо рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЗрдВрджреНрд░ рд▓реЗ рдЬрд╛рдПрдВред рдХрд┐рд╕реА рднреА рдХрд╛рд░рдг рд╕реЗ рджреЗрд░реА рди рдХрд░реЗрдВуАВ"

Marathi: "тЪая╕П рд╣реА рдПрдХ рд╡реИрджреНрдпрдХреАрдп рдЖрдгреАрдмрд╛рдгреА рдЖрд╣реЗ. рд▓рдЧреЗрдЪ 108 рд╡рд░ рдХреЙрд▓ рдХрд░рд╛. рд░реБрдЧреНрдгрд╛рд▓рд╛ рдЬрд╡рд│рдЪреНрдпрд╛ рдЖрд░реЛрдЧреНрдп рдХреЗрдВрджреНрд░рд╛рд╡рд░ рдиреЗрдпрд╛. рдХреЛрдгрддреНрдпрд╛рд╣реА рдХрд╛рд░рдгрд╛рд╕реНрддрд╡ рдЙрд╢реАрд░ рдХрд░реВ рдирдХрд╛."

SCHEME NOT FOUND TEMPLATES:
English: "I couldn't find specific information about this scheme in my database. Please check with your local health department or visit the official government website for the most current information."

Hindi: "рдореБрдЭреЗ рдЕрдкрдиреЗ рдбреЗрдЯрд╛рдмреЗрд╕ рдореЗрдВ рдЗрд╕ рдпреЛрдЬрдирд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╡рд┐рд╢реЗрд╖ рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рдорд┐рд▓реАред рдХреГрдкрдпрд╛ рдирд╡реАрдирддрдо рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рдЕрдкрдиреЗ рд╕реНрдерд╛рдиреАрдп рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╡рд┐рднрд╛рдЧ рд╕реЗ рдЬрд╛рдВрдЪ рдХрд░реЗрдВ рдпрд╛ рд╕рд░рдХрд╛рд░реА рд╡реЗрдмрд╕рд╛рдЗрдЯ рдкрд░ рдЬрд╛рдПрдВуАВ"

тЬЕ DOs
- Always match user's exact language
- Use simple, clear vocabulary
- Be empathetic and supportive  
- Include necessary disclaimers
- Use bullet points for easy reading

тЭМ DON'Ts
- Never mix languages in the same response
- Don't show system tags or metadata
- Don't invent scheme details
- Don't provide medical diagnoses
- Don't use complex jargon

ЁЯОп SUCCESS RULES:
тЬЕ 100% Language Match
тЬЕ Simple, Clear Communication
тЬЕ Factual & Accurate Information
тЬЕ Supportive & Empathetic Tone

        <context>
        {context}
        </context>

        Question: {input}
        """)

        # Create chains
        document_chain = create_stuff_documents_chain(llm, prompt)
        retriever = db.as_retriever()
        retrieval_chain = create_retrieval_chain(retriever, document_chain)

        print("тЬЕ Chatbot initialized successfully!")
        return True
        
    except Exception as e:
        print(f"тЭМ Error initializing chatbot: {e}")
        return False

# Startup event
@app.on_event("startup")
async def startup_event():
    """Initialize chatbot on startup"""
    success = initialize_chatbot()
    if not success:
        raise Exception("Failed to initialize chatbot components")

# Simple in-memory storage for sessions (optional)
sessions = {}

# Endpoint 1: Health check
@app.get("/")
async def health_check():
    return {
        "status": "healthy", 
        "message": "ASHA Worker Chatbot API is running!",
        "timestamp": datetime.now().isoformat()
    }

# Endpoint 2: Chat endpoint
@app.post("/chat", response_model=ChatResponse)
async def chat(chat_request: ChatRequest):
    """Main chat endpoint - accepts user query and returns chatbot response"""
    
    if retrieval_chain is None:
        raise HTTPException(status_code=503, detail="Chatbot not initialized")
    
    try:
        # Generate or use session ID
        # session_id = chat_request.session_id or str(uuid.uuid4())
        
        # Get response from chatbot
        response = retrieval_chain.invoke({"input": chat_request.message})
        
        # Store session (optional)
        # if session_id not in sessions:
        #     sessions[session_id] = {
        #         'created_at': datetime.now().isoformat(),
        #         'message_count': 0
        #     }
        # sessions[session_id]['message_count'] += 1
        
        return ChatResponse(
            response=response["answer"],
            # session_id=session_id,
            timestamp=datetime.now().isoformat()
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error processing message: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)